// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid()) @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  credits       Int      @default(0)

  sessions   Session[]
  accounts   Account[]
  workflows  Workflow[]
  executions WorkflowExecution[]
  phases     ExecutionPhase[]
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Workflow {
  id            String    @id @default(cuid()) @map("_id")
  userId        String
  name          String
  description   String?
  definition    String
  executionPlan String?
  creditsCost   Int       @default(0)
  status        String
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  executions WorkflowExecution[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model WorkflowExecution {
  id              String    @id @default(cuid()) @map("_id")
  workflowId      String
  userId          String
  trigger         String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  creditsConsumed Int       @default(0)
  definition      String    @default("{}")

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id                  String    @id @default(cuid()) @map("_id")
  workflowExecutionId String
  userId              String
  status              String
  number              Int
  node                String
  name                String
  startedAt           DateTime?
  completedAt         DateTime?
  inputs              String?
  outputs             String?
  creditsCost         Int?

  logs ExecutionLog[]

  workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExecutionLog {
  id               String   @id @default(cuid()) @map("_id")
  logLevel         String
  message          String
  timestamp        DateTime @default(now())
  executionPhaseId String

  executionPhase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}
